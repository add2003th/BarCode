'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3082
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data

'
'This source code was auto-generated by Microsoft.CompactFramework.Design.Data, Version 2.0.50727.3082.
'

'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DsBarcode")>  _
Partial Public Class DsBarcode
    Inherits Global.System.Data.DataSet
    
    Private tableTbBarcode As TbBarcodeDataTable
    
    Private tableTbGPS As TbGPSDataTable
    
    Private tableTbGPS2 As TbGPS2DataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property TbBarcode() As TbBarcodeDataTable
        Get
            Return Me.tableTbBarcode
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property TbGPS() As TbGPSDataTable
        Get
            Return Me.tableTbGPS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property TbGPS2() As TbGPS2DataTable
        Get
            Return Me.tableTbGPS2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DsBarcode = CType(MyBase.Clone,DsBarcode)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("TbBarcode")) Is Nothing) Then
                MyBase.Tables.Add(New TbBarcodeDataTable(ds.Tables("TbBarcode")))
            End If
            If (Not (ds.Tables("TbGPS")) Is Nothing) Then
                MyBase.Tables.Add(New TbGPSDataTable(ds.Tables("TbGPS")))
            End If
            If (Not (ds.Tables("TbGPS2")) Is Nothing) Then
                MyBase.Tables.Add(New TbGPS2DataTable(ds.Tables("TbGPS2")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableTbBarcode = CType(MyBase.Tables("TbBarcode"),TbBarcodeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTbBarcode) Is Nothing) Then
                Me.tableTbBarcode.InitVars
            End If
        End If
        Me.tableTbGPS = CType(MyBase.Tables("TbGPS"),TbGPSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTbGPS) Is Nothing) Then
                Me.tableTbGPS.InitVars
            End If
        End If
        Me.tableTbGPS2 = CType(MyBase.Tables("TbGPS2"),TbGPS2DataTable)
        If (initTable = true) Then
            If (Not (Me.tableTbGPS2) Is Nothing) Then
                Me.tableTbGPS2.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DsBarcode"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DsBarcode.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableTbBarcode = New TbBarcodeDataTable
        MyBase.Tables.Add(Me.tableTbBarcode)
        Me.tableTbGPS = New TbGPSDataTable
        MyBase.Tables.Add(Me.tableTbGPS)
        Me.tableTbGPS2 = New TbGPS2DataTable
        MyBase.Tables.Add(Me.tableTbGPS2)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTbBarcode() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTbGPS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTbGPS2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DsBarcode = New DsBarcode
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub TbBarcodeRowChangeEventHandler(ByVal sender As Object, ByVal e As TbBarcodeRowChangeEvent)
    
    Public Delegate Sub TbGPSRowChangeEventHandler(ByVal sender As Object, ByVal e As TbGPSRowChangeEvent)
    
    Public Delegate Sub TbGPS2RowChangeEventHandler(ByVal sender As Object, ByVal e As TbGPS2RowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TbBarcodeDataTable
        Inherits Global.System.Data.TypedTableBase(Of TbBarcodeRow)
        
        Private columnBARCODE As Global.System.Data.DataColumn
        
        Private columnORGANIZATION_CODE As Global.System.Data.DataColumn
        
        Private columnMACHINEMODEL As Global.System.Data.DataColumn
        
        Private columnSERIALNO As Global.System.Data.DataColumn
        
        Private columnMACHINE_CODE As Global.System.Data.DataColumn
        
        Private columnMACHINE_SERIAL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TbBarcode"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BARCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBARCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORGANIZATION_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORGANIZATION_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MACHINEMODELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMACHINEMODEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SERIALNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIALNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MACHINE_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMACHINE_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MACHINE_SERIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMACHINE_SERIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TbBarcodeRow
            Get
                Return CType(Me.Rows(index),TbBarcodeRow)
            End Get
        End Property
        
        Public Event TbBarcodeRowChanging As TbBarcodeRowChangeEventHandler
        
        Public Event TbBarcodeRowChanged As TbBarcodeRowChangeEventHandler
        
        Public Event TbBarcodeRowDeleting As TbBarcodeRowChangeEventHandler
        
        Public Event TbBarcodeRowDeleted As TbBarcodeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTbBarcodeRow(ByVal row As TbBarcodeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTbBarcodeRow(ByVal BARCODE As String, ByVal ORGANIZATION_CODE As String, ByVal MACHINEMODEL As String, ByVal SERIALNO As String, ByVal MACHINE_CODE As String, ByVal MACHINE_SERIAL As String) As TbBarcodeRow
            Dim rowTbBarcodeRow As TbBarcodeRow = CType(Me.NewRow,TbBarcodeRow)
            Dim columnValuesArray() As Object = New Object() {BARCODE, ORGANIZATION_CODE, MACHINEMODEL, SERIALNO, MACHINE_CODE, MACHINE_SERIAL}
            rowTbBarcodeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTbBarcodeRow)
            Return rowTbBarcodeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByBARCODE(ByVal BARCODE As String) As TbBarcodeRow
            Return CType(Me.Rows.Find(New Object() {BARCODE}),TbBarcodeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TbBarcodeDataTable = CType(MyBase.Clone,TbBarcodeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TbBarcodeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnBARCODE = MyBase.Columns("BARCODE")
            Me.columnORGANIZATION_CODE = MyBase.Columns("ORGANIZATION_CODE")
            Me.columnMACHINEMODEL = MyBase.Columns("MACHINEMODEL")
            Me.columnSERIALNO = MyBase.Columns("SERIALNO")
            Me.columnMACHINE_CODE = MyBase.Columns("MACHINE_CODE")
            Me.columnMACHINE_SERIAL = MyBase.Columns("MACHINE_SERIAL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnBARCODE = New Global.System.Data.DataColumn("BARCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBARCODE)
            Me.columnORGANIZATION_CODE = New Global.System.Data.DataColumn("ORGANIZATION_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORGANIZATION_CODE)
            Me.columnMACHINEMODEL = New Global.System.Data.DataColumn("MACHINEMODEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMACHINEMODEL)
            Me.columnSERIALNO = New Global.System.Data.DataColumn("SERIALNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIALNO)
            Me.columnMACHINE_CODE = New Global.System.Data.DataColumn("MACHINE_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMACHINE_CODE)
            Me.columnMACHINE_SERIAL = New Global.System.Data.DataColumn("MACHINE_SERIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMACHINE_SERIAL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnBARCODE}, true))
            Me.columnBARCODE.AllowDBNull = false
            Me.columnBARCODE.Unique = true
            Me.columnORGANIZATION_CODE.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTbBarcodeRow() As TbBarcodeRow
            Return CType(Me.NewRow,TbBarcodeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TbBarcodeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TbBarcodeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TbBarcodeRowChangedEvent) Is Nothing) Then
                RaiseEvent TbBarcodeRowChanged(Me, New TbBarcodeRowChangeEvent(CType(e.Row,TbBarcodeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TbBarcodeRowChangingEvent) Is Nothing) Then
                RaiseEvent TbBarcodeRowChanging(Me, New TbBarcodeRowChangeEvent(CType(e.Row,TbBarcodeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TbBarcodeRowDeletedEvent) Is Nothing) Then
                RaiseEvent TbBarcodeRowDeleted(Me, New TbBarcodeRowChangeEvent(CType(e.Row,TbBarcodeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TbBarcodeRowDeletingEvent) Is Nothing) Then
                RaiseEvent TbBarcodeRowDeleting(Me, New TbBarcodeRowChangeEvent(CType(e.Row,TbBarcodeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTbBarcodeRow(ByVal row As TbBarcodeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsBarcode = New DsBarcode
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TbBarcodeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TbGPSDataTable
        Inherits Global.System.Data.TypedTableBase(Of TbGPSRow)
        
        Private columnMACHINE_CODE As Global.System.Data.DataColumn
        
        Private columnCUSTOMER_CODE As Global.System.Data.DataColumn
        
        Private columnORGANIZATION_CODE As Global.System.Data.DataColumn
        
        Private columnLATITUDE As Global.System.Data.DataColumn
        
        Private columnLONGTITUDE As Global.System.Data.DataColumn
        
        Private columnCUSTOMER_NAME As Global.System.Data.DataColumn
        
        Private columnORGANIZATION_NAME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TbGPS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MACHINE_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMACHINE_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUSTOMER_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORGANIZATION_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORGANIZATION_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LATITUDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLATITUDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LONGTITUDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLONGTITUDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUSTOMER_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORGANIZATION_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORGANIZATION_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TbGPSRow
            Get
                Return CType(Me.Rows(index),TbGPSRow)
            End Get
        End Property
        
        Public Event TbGPSRowChanging As TbGPSRowChangeEventHandler
        
        Public Event TbGPSRowChanged As TbGPSRowChangeEventHandler
        
        Public Event TbGPSRowDeleting As TbGPSRowChangeEventHandler
        
        Public Event TbGPSRowDeleted As TbGPSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTbGPSRow(ByVal row As TbGPSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTbGPSRow(ByVal MACHINE_CODE As String, ByVal CUSTOMER_CODE As String, ByVal ORGANIZATION_CODE As String, ByVal LATITUDE As String, ByVal LONGTITUDE As String, ByVal CUSTOMER_NAME As String, ByVal ORGANIZATION_NAME As String) As TbGPSRow
            Dim rowTbGPSRow As TbGPSRow = CType(Me.NewRow,TbGPSRow)
            Dim columnValuesArray() As Object = New Object() {MACHINE_CODE, CUSTOMER_CODE, ORGANIZATION_CODE, LATITUDE, LONGTITUDE, CUSTOMER_NAME, ORGANIZATION_NAME}
            rowTbGPSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTbGPSRow)
            Return rowTbGPSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMACHINE_CODE(ByVal MACHINE_CODE As String) As TbGPSRow
            Return CType(Me.Rows.Find(New Object() {MACHINE_CODE}),TbGPSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TbGPSDataTable = CType(MyBase.Clone,TbGPSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TbGPSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMACHINE_CODE = MyBase.Columns("MACHINE_CODE")
            Me.columnCUSTOMER_CODE = MyBase.Columns("CUSTOMER_CODE")
            Me.columnORGANIZATION_CODE = MyBase.Columns("ORGANIZATION_CODE")
            Me.columnLATITUDE = MyBase.Columns("LATITUDE")
            Me.columnLONGTITUDE = MyBase.Columns("LONGTITUDE")
            Me.columnCUSTOMER_NAME = MyBase.Columns("CUSTOMER_NAME")
            Me.columnORGANIZATION_NAME = MyBase.Columns("ORGANIZATION_NAME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMACHINE_CODE = New Global.System.Data.DataColumn("MACHINE_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMACHINE_CODE)
            Me.columnCUSTOMER_CODE = New Global.System.Data.DataColumn("CUSTOMER_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_CODE)
            Me.columnORGANIZATION_CODE = New Global.System.Data.DataColumn("ORGANIZATION_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORGANIZATION_CODE)
            Me.columnLATITUDE = New Global.System.Data.DataColumn("LATITUDE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLATITUDE)
            Me.columnLONGTITUDE = New Global.System.Data.DataColumn("LONGTITUDE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLONGTITUDE)
            Me.columnCUSTOMER_NAME = New Global.System.Data.DataColumn("CUSTOMER_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_NAME)
            Me.columnORGANIZATION_NAME = New Global.System.Data.DataColumn("ORGANIZATION_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORGANIZATION_NAME)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMACHINE_CODE}, true))
            Me.columnMACHINE_CODE.AllowDBNull = false
            Me.columnMACHINE_CODE.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTbGPSRow() As TbGPSRow
            Return CType(Me.NewRow,TbGPSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TbGPSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TbGPSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TbGPSRowChangedEvent) Is Nothing) Then
                RaiseEvent TbGPSRowChanged(Me, New TbGPSRowChangeEvent(CType(e.Row,TbGPSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TbGPSRowChangingEvent) Is Nothing) Then
                RaiseEvent TbGPSRowChanging(Me, New TbGPSRowChangeEvent(CType(e.Row,TbGPSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TbGPSRowDeletedEvent) Is Nothing) Then
                RaiseEvent TbGPSRowDeleted(Me, New TbGPSRowChangeEvent(CType(e.Row,TbGPSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TbGPSRowDeletingEvent) Is Nothing) Then
                RaiseEvent TbGPSRowDeleting(Me, New TbGPSRowChangeEvent(CType(e.Row,TbGPSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTbGPSRow(ByVal row As TbGPSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsBarcode = New DsBarcode
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TbGPSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TbGPS2DataTable
        Inherits Global.System.Data.TypedTableBase(Of TbGPS2Row)
        
        Private columnMACHINE_CODE As Global.System.Data.DataColumn
        
        Private columnCUSTOMER_CODE As Global.System.Data.DataColumn
        
        Private columnORGANIZATION_CODE As Global.System.Data.DataColumn
        
        Private columnLATITUDE As Global.System.Data.DataColumn
        
        Private columnLONGTITUDE As Global.System.Data.DataColumn
        
        Private columnCUSTOMER_NAME As Global.System.Data.DataColumn
        
        Private columnORGANIZATION_NAME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TbGPS2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MACHINE_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMACHINE_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUSTOMER_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORGANIZATION_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORGANIZATION_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LATITUDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLATITUDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LONGTITUDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLONGTITUDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUSTOMER_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORGANIZATION_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORGANIZATION_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TbGPS2Row
            Get
                Return CType(Me.Rows(index),TbGPS2Row)
            End Get
        End Property
        
        Public Event TbGPS2RowChanging As TbGPS2RowChangeEventHandler
        
        Public Event TbGPS2RowChanged As TbGPS2RowChangeEventHandler
        
        Public Event TbGPS2RowDeleting As TbGPS2RowChangeEventHandler
        
        Public Event TbGPS2RowDeleted As TbGPS2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTbGPS2Row(ByVal row As TbGPS2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTbGPS2Row(ByVal MACHINE_CODE As String, ByVal CUSTOMER_CODE As String, ByVal ORGANIZATION_CODE As String, ByVal LATITUDE As String, ByVal LONGTITUDE As String, ByVal CUSTOMER_NAME As String, ByVal ORGANIZATION_NAME As String) As TbGPS2Row
            Dim rowTbGPS2Row As TbGPS2Row = CType(Me.NewRow,TbGPS2Row)
            Dim columnValuesArray() As Object = New Object() {MACHINE_CODE, CUSTOMER_CODE, ORGANIZATION_CODE, LATITUDE, LONGTITUDE, CUSTOMER_NAME, ORGANIZATION_NAME}
            rowTbGPS2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowTbGPS2Row)
            Return rowTbGPS2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TbGPS2DataTable = CType(MyBase.Clone,TbGPS2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TbGPS2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMACHINE_CODE = MyBase.Columns("MACHINE_CODE")
            Me.columnCUSTOMER_CODE = MyBase.Columns("CUSTOMER_CODE")
            Me.columnORGANIZATION_CODE = MyBase.Columns("ORGANIZATION_CODE")
            Me.columnLATITUDE = MyBase.Columns("LATITUDE")
            Me.columnLONGTITUDE = MyBase.Columns("LONGTITUDE")
            Me.columnCUSTOMER_NAME = MyBase.Columns("CUSTOMER_NAME")
            Me.columnORGANIZATION_NAME = MyBase.Columns("ORGANIZATION_NAME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMACHINE_CODE = New Global.System.Data.DataColumn("MACHINE_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMACHINE_CODE)
            Me.columnCUSTOMER_CODE = New Global.System.Data.DataColumn("CUSTOMER_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_CODE)
            Me.columnORGANIZATION_CODE = New Global.System.Data.DataColumn("ORGANIZATION_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORGANIZATION_CODE)
            Me.columnLATITUDE = New Global.System.Data.DataColumn("LATITUDE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLATITUDE)
            Me.columnLONGTITUDE = New Global.System.Data.DataColumn("LONGTITUDE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLONGTITUDE)
            Me.columnCUSTOMER_NAME = New Global.System.Data.DataColumn("CUSTOMER_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_NAME)
            Me.columnORGANIZATION_NAME = New Global.System.Data.DataColumn("ORGANIZATION_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORGANIZATION_NAME)
            Me.columnMACHINE_CODE.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTbGPS2Row() As TbGPS2Row
            Return CType(Me.NewRow,TbGPS2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TbGPS2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TbGPS2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TbGPS2RowChangedEvent) Is Nothing) Then
                RaiseEvent TbGPS2RowChanged(Me, New TbGPS2RowChangeEvent(CType(e.Row,TbGPS2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TbGPS2RowChangingEvent) Is Nothing) Then
                RaiseEvent TbGPS2RowChanging(Me, New TbGPS2RowChangeEvent(CType(e.Row,TbGPS2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TbGPS2RowDeletedEvent) Is Nothing) Then
                RaiseEvent TbGPS2RowDeleted(Me, New TbGPS2RowChangeEvent(CType(e.Row,TbGPS2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TbGPS2RowDeletingEvent) Is Nothing) Then
                RaiseEvent TbGPS2RowDeleting(Me, New TbGPS2RowChangeEvent(CType(e.Row,TbGPS2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTbGPS2Row(ByVal row As TbGPS2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsBarcode = New DsBarcode
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TbGPS2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TbBarcodeRow
        Inherits Global.System.Data.DataRow
        
        Private tableTbBarcode As TbBarcodeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTbBarcode = CType(Me.Table,TbBarcodeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BARCODE() As String
            Get
                Return CType(Me(Me.tableTbBarcode.BARCODEColumn),String)
            End Get
            Set
                Me(Me.tableTbBarcode.BARCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORGANIZATION_CODE() As String
            Get
                Return CType(Me(Me.tableTbBarcode.ORGANIZATION_CODEColumn),String)
            End Get
            Set
                Me(Me.tableTbBarcode.ORGANIZATION_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MACHINEMODEL() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbBarcode.MACHINEMODELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MACHINEMODEL' in table 'TbBarcode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbBarcode.MACHINEMODELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SERIALNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbBarcode.SERIALNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SERIALNO' in table 'TbBarcode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbBarcode.SERIALNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MACHINE_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbBarcode.MACHINE_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MACHINE_CODE' in table 'TbBarcode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbBarcode.MACHINE_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MACHINE_SERIAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbBarcode.MACHINE_SERIALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MACHINE_SERIAL' in table 'TbBarcode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbBarcode.MACHINE_SERIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMACHINEMODELNull() As Boolean
            Return Me.IsNull(Me.tableTbBarcode.MACHINEMODELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMACHINEMODELNull()
            Me(Me.tableTbBarcode.MACHINEMODELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSERIALNONull() As Boolean
            Return Me.IsNull(Me.tableTbBarcode.SERIALNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSERIALNONull()
            Me(Me.tableTbBarcode.SERIALNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMACHINE_CODENull() As Boolean
            Return Me.IsNull(Me.tableTbBarcode.MACHINE_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMACHINE_CODENull()
            Me(Me.tableTbBarcode.MACHINE_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMACHINE_SERIALNull() As Boolean
            Return Me.IsNull(Me.tableTbBarcode.MACHINE_SERIALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMACHINE_SERIALNull()
            Me(Me.tableTbBarcode.MACHINE_SERIALColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TbGPSRow
        Inherits Global.System.Data.DataRow
        
        Private tableTbGPS As TbGPSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTbGPS = CType(Me.Table,TbGPSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MACHINE_CODE() As String
            Get
                Return CType(Me(Me.tableTbGPS.MACHINE_CODEColumn),String)
            End Get
            Set
                Me(Me.tableTbGPS.MACHINE_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUSTOMER_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbGPS.CUSTOMER_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUSTOMER_CODE' in table 'TbGPS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbGPS.CUSTOMER_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORGANIZATION_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbGPS.ORGANIZATION_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORGANIZATION_CODE' in table 'TbGPS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbGPS.ORGANIZATION_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LATITUDE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbGPS.LATITUDEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LATITUDE' in table 'TbGPS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbGPS.LATITUDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LONGTITUDE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbGPS.LONGTITUDEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LONGTITUDE' in table 'TbGPS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbGPS.LONGTITUDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUSTOMER_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbGPS.CUSTOMER_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUSTOMER_NAME' in table 'TbGPS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbGPS.CUSTOMER_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORGANIZATION_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbGPS.ORGANIZATION_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORGANIZATION_NAME' in table 'TbGPS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbGPS.ORGANIZATION_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUSTOMER_CODENull() As Boolean
            Return Me.IsNull(Me.tableTbGPS.CUSTOMER_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUSTOMER_CODENull()
            Me(Me.tableTbGPS.CUSTOMER_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORGANIZATION_CODENull() As Boolean
            Return Me.IsNull(Me.tableTbGPS.ORGANIZATION_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORGANIZATION_CODENull()
            Me(Me.tableTbGPS.ORGANIZATION_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLATITUDENull() As Boolean
            Return Me.IsNull(Me.tableTbGPS.LATITUDEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLATITUDENull()
            Me(Me.tableTbGPS.LATITUDEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLONGTITUDENull() As Boolean
            Return Me.IsNull(Me.tableTbGPS.LONGTITUDEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLONGTITUDENull()
            Me(Me.tableTbGPS.LONGTITUDEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUSTOMER_NAMENull() As Boolean
            Return Me.IsNull(Me.tableTbGPS.CUSTOMER_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUSTOMER_NAMENull()
            Me(Me.tableTbGPS.CUSTOMER_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORGANIZATION_NAMENull() As Boolean
            Return Me.IsNull(Me.tableTbGPS.ORGANIZATION_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORGANIZATION_NAMENull()
            Me(Me.tableTbGPS.ORGANIZATION_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TbGPS2Row
        Inherits Global.System.Data.DataRow
        
        Private tableTbGPS2 As TbGPS2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTbGPS2 = CType(Me.Table,TbGPS2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MACHINE_CODE() As String
            Get
                Return CType(Me(Me.tableTbGPS2.MACHINE_CODEColumn),String)
            End Get
            Set
                Me(Me.tableTbGPS2.MACHINE_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUSTOMER_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbGPS2.CUSTOMER_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUSTOMER_CODE' in table 'TbGPS2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbGPS2.CUSTOMER_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORGANIZATION_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbGPS2.ORGANIZATION_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORGANIZATION_CODE' in table 'TbGPS2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbGPS2.ORGANIZATION_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LATITUDE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbGPS2.LATITUDEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LATITUDE' in table 'TbGPS2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbGPS2.LATITUDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LONGTITUDE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbGPS2.LONGTITUDEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LONGTITUDE' in table 'TbGPS2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbGPS2.LONGTITUDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUSTOMER_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbGPS2.CUSTOMER_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUSTOMER_NAME' in table 'TbGPS2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbGPS2.CUSTOMER_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORGANIZATION_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbGPS2.ORGANIZATION_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORGANIZATION_NAME' in table 'TbGPS2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbGPS2.ORGANIZATION_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUSTOMER_CODENull() As Boolean
            Return Me.IsNull(Me.tableTbGPS2.CUSTOMER_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUSTOMER_CODENull()
            Me(Me.tableTbGPS2.CUSTOMER_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORGANIZATION_CODENull() As Boolean
            Return Me.IsNull(Me.tableTbGPS2.ORGANIZATION_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORGANIZATION_CODENull()
            Me(Me.tableTbGPS2.ORGANIZATION_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLATITUDENull() As Boolean
            Return Me.IsNull(Me.tableTbGPS2.LATITUDEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLATITUDENull()
            Me(Me.tableTbGPS2.LATITUDEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLONGTITUDENull() As Boolean
            Return Me.IsNull(Me.tableTbGPS2.LONGTITUDEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLONGTITUDENull()
            Me(Me.tableTbGPS2.LONGTITUDEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUSTOMER_NAMENull() As Boolean
            Return Me.IsNull(Me.tableTbGPS2.CUSTOMER_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUSTOMER_NAMENull()
            Me(Me.tableTbGPS2.CUSTOMER_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORGANIZATION_NAMENull() As Boolean
            Return Me.IsNull(Me.tableTbGPS2.ORGANIZATION_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORGANIZATION_NAMENull()
            Me(Me.tableTbGPS2.ORGANIZATION_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class TbBarcodeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TbBarcodeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TbBarcodeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TbBarcodeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class TbGPSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TbGPSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TbGPSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TbGPSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class TbGPS2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TbGPS2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TbGPS2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TbGPS2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DsBarcodeUtil
    
    Partial Public Class DesignerUtil
        
        Public Shared Function IsDesignTime() As Boolean
            'Determine if this instance is running against .NET Framework by using the MSCoreLib PublicKeyToken
            Dim mscorlibAssembly As System.Reflection.[Assembly] = GetType(Integer).Assembly
            If (Not (mscorlibAssembly) Is Nothing) Then
                If mscorlibAssembly.FullName.ToUpper.EndsWith("B77A5C561934E089") Then
                    Return true
                End If
            End If
            Return false
        End Function
        
        Public Shared Function IsRunTime() As Boolean
            'Determine if this instance is running against .NET Compact Framework by using the MSCoreLib PublicKeyToken
            Dim mscorlibAssembly As System.Reflection.[Assembly] = GetType(Integer).Assembly
            If (Not (mscorlibAssembly) Is Nothing) Then
                If mscorlibAssembly.FullName.ToUpper.EndsWith("969DB8053D3322AC") Then
                    Return true
                End If
            End If
            Return false
        End Function
    End Class
End Namespace
